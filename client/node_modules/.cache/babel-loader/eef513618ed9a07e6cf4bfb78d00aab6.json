{"ast":null,"code":"var _jsxFileName = \"D:\\\\www\\\\maccabi\\\\client\\\\src\\\\chat\\\\Chat.js\";\nimport React from 'react';\nimport { ChannelList } from './ChannelList';\nimport { MessagesPanel } from './MessagePanel';\nimport socketClient from \"socket.io-client\";\nimport './chat.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport class Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      channels: [{\n        id: 1,\n        name: 'myRoom',\n        participants: 10\n      }]\n    };\n\n    this.loadChannels = async () => {\n      fetch('http://localhost:8080/getChannels').then(async response => {\n        let data = await response.json();\n        this.setState({\n          channels: data.channels\n        });\n      });\n    };\n\n    this.handleChannelSelect = id => {\n      this.socket.emit('channel-join', id, ack => {});\n    };\n\n    this.configureSocket = () => {\n      var socket = socketClient(SERVER);\n      socket.on('connection', () => {\n        if (this.state.channel) {\n          this.handleChannelSelect(this.state.channel.id);\n        }\n      });\n      socket.on('channel', channel => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === channel.id) {\n            c.participants = channel.participants;\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      socket.on('message', message => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === message.channel_id) {\n            if (!c.messages) {\n              c.messages = [message];\n            } else {\n              c.messages.push(message);\n            }\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      this.socket = socket;\n    };\n\n    this.handleSendMessage = (channel_id, text) => {\n      this.socket.emit('send-message', {\n        channel_id,\n        text,\n        senderName: this.socket.id,\n        id: Date.now()\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.loadChannels();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-app\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        channels: \"{this.state.channels}\",\n        onselectchannel: \"{this.handleChannelSelect}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessagesPanel, {\n        onsendmessage: \"{this.handleSendMessage}\",\n        channel: \"{this.state.channel}\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/www/maccabi/client/src/chat/Chat.js"],"names":["React","ChannelList","MessagesPanel","socketClient","SERVER","Chat","Component","state","channels","id","name","participants","loadChannels","fetch","then","response","data","json","setState","handleChannelSelect","socket","emit","ack","configureSocket","on","channel","forEach","c","message","channel_id","messages","push","handleSendMessage","text","senderName","Date","now","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAOC,YAAP,MAA0B,kBAA1B;AACA,OAAO,aAAP;;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,OAAO,MAAMC,IAAN,SAAmBL,KAAK,CAACM,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAElCC,KAFkC,GAE1B;AACJC,MAAAA,QAAQ,EAAE,CAAC;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,IAAI,EAAE,QAAf;AAAyBC,QAAAA,YAAY,EAAE;AAAvC,OAAD;AADN,KAF0B;;AAAA,SAUlCC,YAVkC,GAUnB,YAAY;AACvBC,MAAAA,KAAK,CAAC,mCAAD,CAAL,CAA2CC,IAA3C,CAAgD,MAAMC,QAAN,IAAkB;AAC9D,YAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACA,aAAKC,QAAL,CAAc;AAAEV,UAAAA,QAAQ,EAAEQ,IAAI,CAACR;AAAjB,SAAd;AACH,OAHD;AAIH,KAfiC;;AAAA,SAiBlCW,mBAjBkC,GAiBZV,EAAE,IAAI;AACxB,WAAKW,MAAL,CAAYC,IAAZ,CAAiB,cAAjB,EAAiCZ,EAAjC,EAAqCa,GAAG,IAAI,CAC3C,CADD;AAEH,KApBiC;;AAAA,SAsBlCC,eAtBkC,GAsBhB,MAAM;AAEpB,UAAIH,MAAM,GAAGjB,YAAY,CAACC,MAAD,CAAzB;AACAgB,MAAAA,MAAM,CAACI,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5B,YAAI,KAAKjB,KAAL,CAAWkB,OAAf,EAAwB;AACtB,eAAKN,mBAAL,CAAyB,KAAKZ,KAAL,CAAWkB,OAAX,CAAmBhB,EAA5C;AACD;AACF,OAJD;AAMAW,MAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqBC,OAAO,IAAI;AAE9B,YAAIjB,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA1B;AACEA,QAAAA,QAAQ,CAACkB,OAAT,CAAiBC,CAAC,IAAI;AACpB,cAAIA,CAAC,CAAClB,EAAF,KAASgB,OAAO,CAAChB,EAArB,EAAyB;AACvBkB,YAAAA,CAAC,CAAChB,YAAF,GAAiBc,OAAO,CAACd,YAAzB;AACD;AACN,SAJG;AAMJ,aAAKO,QAAL,CAAc;AAAEV,UAAAA;AAAF,SAAd;AAA6B,OAT7B;AAWFY,MAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqBI,OAAO,IAAI;AAC9B,YAAIpB,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAA1B;AACEA,QAAAA,QAAQ,CAACkB,OAAT,CAAiBC,CAAC,IAAI;AACpB,cAAIA,CAAC,CAAClB,EAAF,KAASmB,OAAO,CAACC,UAArB,EAAiC;AAC/B,gBAAI,CAACF,CAAC,CAACG,QAAP,EAAiB;AACfH,cAAAA,CAAC,CAACG,QAAF,GAAa,CAACF,OAAD,CAAb;AACD,aAFD,MAEO;AACLD,cAAAA,CAAC,CAACG,QAAF,CAAWC,IAAX,CAAgBH,OAAhB;AACD;AACF;AACF,SARD;AASA,aAAKV,QAAL,CAAc;AAAEV,UAAAA;AAAF,SAAd;AACD,OAZH;AAcE,WAAKY,MAAL,GAAcA,MAAd;AACH,KAzDiC;;AAAA,SA2D9BY,iBA3D8B,GA2DV,CAACH,UAAD,EAAaI,IAAb,KAAsB;AAC1C,WAAKb,MAAL,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC;AAAEQ,QAAAA,UAAF;AAAcI,QAAAA,IAAd;AAAoBC,QAAAA,UAAU,EAAE,KAAKd,MAAL,CAAYX,EAA5C;AAAgDA,QAAAA,EAAE,EAAE0B,IAAI,CAACC,GAAL;AAApD,OAAjC;AAAoG,KA5DtE;AAAA;;AAMlCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKzB,YAAL;AACH;;AAsDC0B,EAAAA,MAAM,GAAG;AACP,wBACI;AAAA,8BACF;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cADE,eAGA,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAC,uBAAtB;AAA8C,QAAA,eAAe,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,cAHA,eAKA,QAAC,aAAD;AAAe,QAAA,aAAa,EAAC,0BAA7B;AAAwD,QAAA,OAAO,EAAC;AAAhE;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUC;;AAzE6B","sourcesContent":["import React from 'react';\r\nimport { ChannelList } from './ChannelList';\r\nimport { MessagesPanel } from './MessagePanel';\r\nimport socketClient  from \"socket.io-client\";\r\nimport './chat.scss';\r\n\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\n\r\nexport class Chat extends React.Component {\r\n\r\n        state = {\r\n            channels: [{ id: 1, name: 'myRoom', participants: 10 }]\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.loadChannels();\r\n        }\r\n\r\n        loadChannels = async () => {\r\n            fetch('http://localhost:8080/getChannels').then(async response => {\r\n                let data = await response.json();\r\n                this.setState({ channels: data.channels });\r\n            });\r\n        }\r\n\r\n        handleChannelSelect = id => {\r\n            this.socket.emit('channel-join', id, ack => {\r\n            });\r\n        }\r\n\r\n        configureSocket = () => {\r\n\r\n            var socket = socketClient(SERVER);\r\n            socket.on('connection', () => {\r\n              if (this.state.channel) {\r\n                this.handleChannelSelect(this.state.channel.id);\r\n              }\r\n            });\r\n          \r\n            socket.on('channel', channel => {\r\n              \r\n              let channels = this.state.channels;\r\n                channels.forEach(c => {\r\n                  if (c.id === channel.id) {\r\n                    c.participants = channel.participants;\r\n                  }\r\n            });\r\n          \r\n            this.setState({ channels });});\r\n          \r\n          socket.on('message', message => {\r\n            let channels = this.state.channels\r\n              channels.forEach(c => {\r\n                if (c.id === message.channel_id) {\r\n                  if (!c.messages) {\r\n                    c.messages = [message];\r\n                  } else {\r\n                    c.messages.push(message);\r\n                  }\r\n                }\r\n              });\r\n              this.setState({ channels });\r\n            });\r\n          \r\n            this.socket = socket;\r\n        }\r\n          \r\n            handleSendMessage = (channel_id, text) => {\r\n            this.socket.emit('send-message', { channel_id, text, senderName: this.socket.id, id: Date.now() });}\r\n\r\n          render() {\r\n            return (\r\n                <div>\r\n              <div className=\"chat-app\"></div>\r\n          \r\n                <ChannelList channels=\"{this.state.channels}\" onselectchannel=\"{this.handleChannelSelect}\"></ChannelList>\r\n                \r\n                <MessagesPanel onsendmessage=\"{this.handleSendMessage}\" channel=\"{this.state.channel}\"></MessagesPanel>\r\n                </div>\r\n              \r\n            );\r\n            }\r\n\r\n    }\r\n"]},"metadata":{},"sourceType":"module"}