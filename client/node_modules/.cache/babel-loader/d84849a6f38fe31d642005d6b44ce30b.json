{"ast":null,"code":"var _jsxFileName = \"D:\\\\www\\\\maccabi\\\\client\\\\src\\\\chat\\\\Chat.js\";\nimport React from 'react';\nimport { ChannelList } from './ChannelList';\nimport './chat.scss';\nimport { MessagesPanel } from './MessagePanel';\nimport socketClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport class Chat extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      channels: null,\n      socket: null,\n      channel: null\n    };\n\n    this.configureSocket = () => {\n      var socket = socketClient(SERVER); // select channel\n\n      socket.on('connection', () => {\n        if (this.state.channel) {\n          this.handleChannelSelect(this.state.channel.id);\n        }\n      }); // Update the channel participants from the server\n\n      socket.on('channel', channel => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === channel.id) {\n            c.participants = channel.participants;\n          }\n        });\n        this.setState({\n          channels\n        });\n      }); // Update the channel in state of new message comming from the server\n\n      socket.on('message', message => {\n        let channels = this.state.channels;\n        channels.forEach(c => {\n          if (c.id === message.channel_id) {\n            if (!c.messages) {\n              c.messages = [message]; // first message on list\n            } else {\n              c.messages.push(message);\n            }\n          }\n        });\n        this.setState({\n          channels\n        });\n      });\n      this.socket = socket;\n    };\n\n    this.loadChannels = async () => {\n      fetch(SERVER + '/getChannels').then(async response => {\n        let data = await response.json();\n        this.setState({\n          channels: data.channels\n        });\n      });\n    };\n\n    this.handleChannelSelect = id => {\n      let channel = this.state.channels.find(c => {\n        return c.id === id;\n      });\n      this.setState({\n        channel\n      });\n      this.socket.emit('channel-join', id, res => {});\n    };\n\n    this.handleSendMessage = (channel_id, text) => {\n      var currentTime = new Date().getHours();\n      this.socket.emit('send-message', {\n        channel_id,\n        text,\n        senderName: this.props.state.currentUser,\n        id: Date.now(),\n        currentTime: currentTime\n      });\n    };\n  }\n\n  // the socket client\n  componentDidMount() {\n    this.loadChannels();\n    this.configureSocket();\n  } // Socket client configuration\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-app\",\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        channels: this.state.channels,\n        onSelectChannel: this.handleChannelSelect,\n        currentUser: this.props.state.currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessagesPanel, {\n        onSendMessage: this.handleSendMessage,\n        channel: this.state.channel,\n        currentUser: this.props.state.currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/www/maccabi/client/src/chat/Chat.js"],"names":["React","ChannelList","MessagesPanel","socketClient","SERVER","Chat","Component","state","channels","socket","channel","configureSocket","on","handleChannelSelect","id","forEach","c","participants","setState","message","channel_id","messages","push","loadChannels","fetch","then","response","data","json","find","emit","res","handleSendMessage","text","currentTime","Date","getHours","senderName","props","currentUser","now","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ChannelList } from './ChannelList';\r\nimport './chat.scss';\r\nimport { MessagesPanel } from './MessagePanel';\r\nimport socketClient from \"socket.io-client\";\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\n\r\nexport class Chat extends React.Component {\r\n\r\n    state = {\r\n        channels: null,\r\n        socket: null,\r\n        channel: null\r\n    }\r\n    \r\n    socket; // the socket client\r\n    \r\n    componentDidMount() {\r\n        this.loadChannels();\r\n        this.configureSocket();\r\n    }\r\n    \r\n    // Socket client configuration\r\n    configureSocket = () => {\r\n        \r\n        var socket = socketClient(SERVER);\r\n        \r\n        // select channel\r\n        socket.on('connection', () => {\r\n            if (this.state.channel) {\r\n                this.handleChannelSelect(this.state.channel.id);\r\n            }\r\n        });\r\n        \r\n        // Update the channel participants from the server\r\n        socket.on('channel', channel => {\r\n            \r\n            let channels = this.state.channels;\r\n            channels.forEach(c => {\r\n                if (c.id === channel.id) {\r\n                    c.participants = channel.participants;\r\n                }\r\n            });\r\n            this.setState({ channels });\r\n        });\r\n        \r\n        // Update the channel in state of new message comming from the server\r\n        socket.on('message', message => {\r\n            \r\n            let channels = this.state.channels\r\n            channels.forEach(c => {\r\n                if (c.id === message.channel_id) {\r\n                    if (!c.messages) {\r\n                        c.messages = [message]; // first message on list\r\n                    } else {\r\n                        c.messages.push(message);\r\n                    }\r\n                }\r\n            });\r\n            this.setState({ channels });\r\n        });\r\n        this.socket = socket;\r\n    }\r\n    \r\n    // Loading the channels from the server to state memory\r\n    loadChannels = async () => {\r\n        fetch(SERVER + '/getChannels').then(async response => {\r\n            let data = await response.json();\r\n            this.setState({ channels: data.channels });\r\n        })\r\n    }\r\n    \r\n    // Get the selected channel from the channels, update the state and join the channel on the server\r\n    handleChannelSelect = id => {\r\n        let channel = this.state.channels.find(c => {\r\n            return c.id === id;\r\n        });\r\n        this.setState({ channel });\r\n        this.socket.emit('channel-join', id, res => {\r\n        });\r\n    }\r\n    \r\n    // Send a new message to the server\r\n    handleSendMessage = (channel_id, text) => {\r\n        var currentTime = new Date().getHours();\r\n        this.socket.emit('send-message', { channel_id, text, senderName: this.props.state.currentUser, id: Date.now(), currentTime: currentTime });\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className='chat-app'>\r\n                \r\n                <ChannelList channels={this.state.channels} onSelectChannel={this.handleChannelSelect} currentUser={this.props.state.currentUser}/>\r\n                <MessagesPanel onSendMessage={this.handleSendMessage} channel={this.state.channel} currentUser={this.props.state.currentUser} />\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}